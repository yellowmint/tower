// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounts/rpcpublic/v1/accounts.proto

package rpcpublicv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _accounts_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetAccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountRequestMultiError, or nil if none found.
func (m *GetAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = GetAccountRequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountRequestMultiError(errors)
	}

	return nil
}

func (m *GetAccountRequest) _validateUuid(uuid string) error {
	if matched := _accounts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetAccountRequestMultiError is an error wrapping multiple validation errors
// returned by GetAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountRequestMultiError) AllErrors() []error { return m }

// GetAccountRequestValidationError is the validation error returned by
// GetAccountRequest.Validate if the designated constraints aren't met.
type GetAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountRequestValidationError) ErrorName() string {
	return "GetAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountRequestValidationError{}

// Validate checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountResponseMultiError, or nil if none found.
func (m *GetAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = GetAccountResponseValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetName() == nil {
		err := GetAccountResponseValidationError{
			field:  "Name",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountResponseValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountResponseMultiError(errors)
	}

	return nil
}

func (m *GetAccountResponse) _validateUuid(uuid string) error {
	if matched := _accounts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetAccountResponseMultiError is an error wrapping multiple validation errors
// returned by GetAccountResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountResponseMultiError) AllErrors() []error { return m }

// GetAccountResponseValidationError is the validation error returned by
// GetAccountResponse.Validate if the designated constraints aren't met.
type GetAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountResponseValidationError) ErrorName() string {
	return "GetAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountResponseValidationError{}

// Validate checks the field values on GetMyAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyAccountRequestMultiError, or nil if none found.
func (m *GetMyAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMyAccountRequestMultiError(errors)
	}

	return nil
}

// GetMyAccountRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMyAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyAccountRequestMultiError) AllErrors() []error { return m }

// GetMyAccountRequestValidationError is the validation error returned by
// GetMyAccountRequest.Validate if the designated constraints aren't met.
type GetMyAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyAccountRequestValidationError) ErrorName() string {
	return "GetMyAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyAccountRequestValidationError{}

// Validate checks the field values on GetMyAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyAccountResponseMultiError, or nil if none found.
func (m *GetMyAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = GetMyAccountResponseValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetName() == nil {
		err := GetMyAccountResponseValidationError{
			field:  "Name",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyAccountResponseValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyAccountResponseValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyAccountResponseValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMyAccountResponseMultiError(errors)
	}

	return nil
}

func (m *GetMyAccountResponse) _validateUuid(uuid string) error {
	if matched := _accounts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetMyAccountResponseMultiError is an error wrapping multiple validation
// errors returned by GetMyAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMyAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyAccountResponseMultiError) AllErrors() []error { return m }

// GetMyAccountResponseValidationError is the validation error returned by
// GetMyAccountResponse.Validate if the designated constraints aren't met.
type GetMyAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyAccountResponseValidationError) ErrorName() string {
	return "GetMyAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyAccountResponseValidationError{}

// Validate checks the field values on CreateMyAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMyAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMyAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMyAccountRequestMultiError, or nil if none found.
func (m *CreateMyAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMyAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 6 || l > 16 {
		err := CreateMyAccountRequestValidationError{
			field:  "Name",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateMyAccountRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateMyAccountRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMyAccountRequestMultiError(errors)
	}

	return nil
}

// CreateMyAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMyAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMyAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMyAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMyAccountRequestMultiError) AllErrors() []error { return m }

// CreateMyAccountRequestValidationError is the validation error returned by
// CreateMyAccountRequest.Validate if the designated constraints aren't met.
type CreateMyAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMyAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMyAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMyAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMyAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMyAccountRequestValidationError) ErrorName() string {
	return "CreateMyAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMyAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMyAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMyAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMyAccountRequestValidationError{}

var _CreateMyAccountRequest_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

// Validate checks the field values on CreateMyAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMyAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMyAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMyAccountResponseMultiError, or nil if none found.
func (m *CreateMyAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMyAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateMyAccountResponseMultiError(errors)
	}

	return nil
}

// CreateMyAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMyAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMyAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMyAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMyAccountResponseMultiError) AllErrors() []error { return m }

// CreateMyAccountResponseValidationError is the validation error returned by
// CreateMyAccountResponse.Validate if the designated constraints aren't met.
type CreateMyAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMyAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMyAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMyAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMyAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMyAccountResponseValidationError) ErrorName() string {
	return "CreateMyAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMyAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMyAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMyAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMyAccountResponseValidationError{}

// Validate checks the field values on DeleteMyAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMyAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMyAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMyAccountRequestMultiError, or nil if none found.
func (m *DeleteMyAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMyAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMyAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteMyAccountRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMyAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMyAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMyAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMyAccountRequestMultiError) AllErrors() []error { return m }

// DeleteMyAccountRequestValidationError is the validation error returned by
// DeleteMyAccountRequest.Validate if the designated constraints aren't met.
type DeleteMyAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMyAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMyAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMyAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMyAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMyAccountRequestValidationError) ErrorName() string {
	return "DeleteMyAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMyAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMyAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMyAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMyAccountRequestValidationError{}

// Validate checks the field values on DeleteMyAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMyAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMyAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMyAccountResponseMultiError, or nil if none found.
func (m *DeleteMyAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMyAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMyAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteMyAccountResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMyAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMyAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMyAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMyAccountResponseMultiError) AllErrors() []error { return m }

// DeleteMyAccountResponseValidationError is the validation error returned by
// DeleteMyAccountResponse.Validate if the designated constraints aren't met.
type DeleteMyAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMyAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMyAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMyAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMyAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMyAccountResponseValidationError) ErrorName() string {
	return "DeleteMyAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMyAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMyAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMyAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMyAccountResponseValidationError{}

// Validate checks the field values on AccountName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountNameMultiError, or
// nil if none found.
func (m *AccountName) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetBase()); l < 6 || l > 16 {
		err := AccountNameValidationError{
			field:  "Base",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AccountName_Base_Pattern.MatchString(m.GetBase()) {
		err := AccountNameValidationError{
			field:  "Base",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNumber() < 1 {
		err := AccountNameValidationError{
			field:  "Number",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccountNameMultiError(errors)
	}

	return nil
}

// AccountNameMultiError is an error wrapping multiple validation errors
// returned by AccountName.ValidateAll() if the designated constraints aren't met.
type AccountNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountNameMultiError) AllErrors() []error { return m }

// AccountNameValidationError is the validation error returned by
// AccountName.Validate if the designated constraints aren't met.
type AccountNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountNameValidationError) ErrorName() string { return "AccountNameValidationError" }

// Error satisfies the builtin error interface
func (e AccountNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountNameValidationError{}

var _AccountName_Base_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")
